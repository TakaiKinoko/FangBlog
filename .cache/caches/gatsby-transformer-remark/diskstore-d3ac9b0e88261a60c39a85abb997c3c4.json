{
  "expireTime": 9007200830738915000,
  "key": "transformer-remark-markdown-html-ast-46f11da151244510536a7593eca3e16b-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-reading-time-",
  "val": {
    "type": "root",
    "children": [
      {
        "type": "element",
        "tagName": "p",
        "properties": {},
        "children": [
          {
            "type": "text",
            "value": "There’s an intrinsic tradeoff in the use of device memories in CUDA: the ",
            "position": {
              "start": { "line": 2, "column": 1, "offset": 1 },
              "end": { "line": 2, "column": 74, "offset": 74 }
            }
          },
          {
            "type": "element",
            "tagName": "strong",
            "properties": {},
            "children": [
              {
                "type": "text",
                "value": "global memory",
                "position": {
                  "start": { "line": 2, "column": 76, "offset": 76 },
                  "end": { "line": 2, "column": 89, "offset": 89 }
                }
              }
            ],
            "position": {
              "start": { "line": 2, "column": 74, "offset": 74 },
              "end": { "line": 2, "column": 91, "offset": 91 }
            }
          },
          {
            "type": "text",
            "value": " is large but slow, whereas the ",
            "position": {
              "start": { "line": 2, "column": 91, "offset": 91 },
              "end": { "line": 2, "column": 123, "offset": 123 }
            }
          },
          {
            "type": "element",
            "tagName": "strong",
            "properties": {},
            "children": [
              {
                "type": "text",
                "value": "shared memory",
                "position": {
                  "start": { "line": 2, "column": 125, "offset": 125 },
                  "end": { "line": 2, "column": 138, "offset": 138 }
                }
              }
            ],
            "position": {
              "start": { "line": 2, "column": 123, "offset": 123 },
              "end": { "line": 2, "column": 140, "offset": 140 }
            }
          },
          {
            "type": "text",
            "value": " is small but fast. ",
            "position": {
              "start": { "line": 2, "column": 140, "offset": 140 },
              "end": { "line": 2, "column": 160, "offset": 160 }
            }
          }
        ],
        "position": {
          "start": { "line": 2, "column": 1, "offset": 1 },
          "end": { "line": 2, "column": 160, "offset": 160 }
        }
      },
      { "type": "text", "value": "\n" },
      {
        "type": "element",
        "tagName": "p",
        "properties": {},
        "children": [
          {
            "type": "text",
            "value": "(To recap on the memory hierarchy: ",
            "position": {
              "start": { "line": 4, "column": 1, "offset": 162 },
              "end": { "line": 4, "column": 36, "offset": 197 }
            }
          },
          {
            "type": "element",
            "tagName": "a",
            "properties": { "href": "/cuda1" },
            "children": [
              {
                "type": "text",
                "value": "The CUDA Parallel Programming Model - 1. Concepts",
                "position": {
                  "start": { "line": 4, "column": 37, "offset": 198 },
                  "end": { "line": 4, "column": 86, "offset": 247 }
                }
              }
            ],
            "position": {
              "start": { "line": 4, "column": 36, "offset": 197 },
              "end": { "line": 4, "column": 95, "offset": 256 }
            }
          },
          {
            "type": "text",
            "value": ", on how to specify memories for variables: ",
            "position": {
              "start": { "line": 4, "column": 95, "offset": 256 },
              "end": { "line": 4, "column": 139, "offset": 300 }
            }
          },
          {
            "type": "element",
            "tagName": "a",
            "properties": { "href": "/cudaProg2-Variables" },
            "children": [
              {
                "type": "text",
                "value": "CUDA Programming - 2. CUDA Variable Type Qualifiers",
                "position": {
                  "start": { "line": 4, "column": 140, "offset": 301 },
                  "end": { "line": 4, "column": 191, "offset": 352 }
                }
              }
            ],
            "position": {
              "start": { "line": 4, "column": 139, "offset": 300 },
              "end": { "line": 4, "column": 214, "offset": 375 }
            }
          },
          {
            "type": "text",
            "value": ".)",
            "position": {
              "start": { "line": 4, "column": 214, "offset": 375 },
              "end": { "line": 4, "column": 216, "offset": 377 }
            }
          }
        ],
        "position": {
          "start": { "line": 4, "column": 1, "offset": 162 },
          "end": { "line": 4, "column": 216, "offset": 377 }
        }
      },
      { "type": "text", "value": "\n" },
      {
        "type": "element",
        "tagName": "p",
        "properties": {},
        "children": [
          {
            "type": "text",
            "value": "A common strategy is to partition the ",
            "position": {
              "start": { "line": 6, "column": 1, "offset": 379 },
              "end": { "line": 6, "column": 39, "offset": 417 }
            }
          },
          {
            "type": "element",
            "tagName": "strong",
            "properties": {},
            "children": [
              {
                "type": "text",
                "value": "data",
                "position": {
                  "start": { "line": 6, "column": 41, "offset": 419 },
                  "end": { "line": 6, "column": 45, "offset": 423 }
                }
              }
            ],
            "position": {
              "start": { "line": 6, "column": 39, "offset": 417 },
              "end": { "line": 6, "column": 47, "offset": 425 }
            }
          },
          {
            "type": "text",
            "value": " into subsets called ",
            "position": {
              "start": { "line": 6, "column": 47, "offset": 425 },
              "end": { "line": 6, "column": 68, "offset": 446 }
            }
          },
          {
            "type": "element",
            "tagName": "strong",
            "properties": {},
            "children": [
              {
                "type": "text",
                "value": "tiles",
                "position": {
                  "start": { "line": 6, "column": 70, "offset": 448 },
                  "end": { "line": 6, "column": 75, "offset": 453 }
                }
              }
            ],
            "position": {
              "start": { "line": 6, "column": 68, "offset": 446 },
              "end": { "line": 6, "column": 77, "offset": 455 }
            }
          },
          {
            "type": "text",
            "value": " so that ",
            "position": {
              "start": { "line": 6, "column": 77, "offset": 455 },
              "end": { "line": 6, "column": 86, "offset": 464 }
            }
          },
          {
            "type": "element",
            "tagName": "strong",
            "properties": {},
            "children": [
              {
                "type": "text",
                "value": "each tile fits into the shared memory",
                "position": {
                  "start": { "line": 6, "column": 88, "offset": 466 },
                  "end": { "line": 6, "column": 125, "offset": 503 }
                }
              }
            ],
            "position": {
              "start": { "line": 6, "column": 86, "offset": 464 },
              "end": { "line": 6, "column": 127, "offset": 505 }
            }
          },
          {
            "type": "text",
            "value": ". An important criterion is that kernel computation on these tiles can be performed independently of each other. Note that ",
            "position": {
              "start": { "line": 6, "column": 127, "offset": 505 },
              "end": { "line": 6, "column": 250, "offset": 628 }
            }
          },
          {
            "type": "element",
            "tagName": "strong",
            "properties": {},
            "children": [
              {
                "type": "text",
                "value": "not",
                "position": {
                  "start": { "line": 6, "column": 252, "offset": 630 },
                  "end": { "line": 6, "column": 255, "offset": 633 }
                }
              }
            ],
            "position": {
              "start": { "line": 6, "column": 250, "offset": 628 },
              "end": { "line": 6, "column": 257, "offset": 635 }
            }
          },
          {
            "type": "text",
            "value": " all data structures can be partitioned into tiles given an arbitrary kernel function.",
            "position": {
              "start": { "line": 6, "column": 257, "offset": 635 },
              "end": { "line": 6, "column": 343, "offset": 721 }
            }
          }
        ],
        "position": {
          "start": { "line": 6, "column": 1, "offset": 379 },
          "end": { "line": 6, "column": 343, "offset": 721 }
        }
      },
      { "type": "text", "value": "\n" },
      {
        "type": "element",
        "tagName": "p",
        "properties": {},
        "children": [
          {
            "type": "text",
            "value": "The term “tile” draws on the analogy that a large wall (i.e., the global memory data) can be covered by tiles (i.e., subsets that each can fit into the shared memory).",
            "position": {
              "start": { "line": 8, "column": 1, "offset": 723 },
              "end": { "line": 8, "column": 168, "offset": 890 }
            }
          }
        ],
        "position": {
          "start": { "line": 8, "column": 1, "offset": 723 },
          "end": { "line": 8, "column": 168, "offset": 890 }
        }
      }
    ],
    "position": {
      "start": { "line": 1, "column": 1, "offset": 0 },
      "end": { "line": 11, "column": 1, "offset": 893 }
    }
  }
}
